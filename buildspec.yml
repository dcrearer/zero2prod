version: 0.2
phases:
  install:
    commands:
      - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - . ~/.cargo/env
      - rustup default 1.90.0
      - cargo install sqlx-cli --no-default-features --features postgres
      - apt-get update
      - apt-get install -y wget apt-transport-https gnupg jq curl
      - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
      - echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | tee -a /etc/apt/sources.list.d/trivy.list
      - apt-get update
      - apt-get install -y trivy
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x kubectl && mv kubectl /usr/local/bin/
  pre_build:
    commands:
      - docker run -d --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=password public.ecr.aws/docker/library/postgres:13
      - sleep 15
      - export DATABASE_URL=postgres://postgres:password@localhost:5432/postgres
      - sqlx database create --database-url postgres://postgres:password@localhost:5432/newsletter
      - export DATABASE_URL=postgres://postgres:password@localhost:5432/newsletter
      - sqlx migrate run
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo Getting database endpoint from RDS...
      - DB_HOST=$(aws rds describe-db-clusters --db-cluster-identifier zero2prod-aurora --query 'DBClusters[0].Endpoint' --output text)
      - echo Getting database password from Secrets Manager...
      - DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id zero2prod/database/credentials --query 'SecretString' --output text | jq -r '.password')
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $IMAGE_REPO_NAME .
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c1-7)
      - docker tag $IMAGE_REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest
  post_build:
    commands:
      - echo Scanning image with Trivy...
      - trivy image $IMAGE_REPO_NAME:latest --quiet --severity HIGH,CRITICAL  || echo "Vulnerabilities found but continuing..."
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest
      - echo Generating Kubernetes patches with real values...
      - sed -i "s|PLACEHOLDER_DB_HOST|$DB_HOST|" k8s/overlays/prod/configmap-patch.yaml
      - sed -i "s|PLACEHOLDER_DB_PASSWORD|$DB_PASSWORD|" k8s/overlays/prod/secret-patch.yaml
      - echo Updating kustomization with new image tag...
      - 'sed -i "s|newTag:.*|newTag: $IMAGE_TAG|" k8s/overlays/prod/kustomization.yaml'
      - ECR_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - 'sed -i "s|newName:.*|newName: $ECR_URI|" k8s/overlays/prod/kustomization.yaml'
      - echo Configuring kubectl for EKS...
      - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name oxidize-k8s
      - echo Deploying to EKS...
      - kubectl apply -k k8s/overlays/prod/
      - echo Waiting for deployment to be ready...
      - kubectl rollout status deployment/zero2prod -n default --timeout=300s
      - echo Getting service endpoint...
      - kubectl get svc zero2prod-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "Service endpoint not yet available"

artifacts:
  files:
    - k8s/**/*
